//
//  LifecycleLogger.swift
//  ChatApp
//
//  Created by –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ on 22.02.2022.
//

import Foundation

class LifecycleLogger {
    
    // –í Info.plist –≤ –∫–ª—é—á–µ isLoggingEnable –í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å, –±—É–¥–µ—Ç –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ—Å—Ç–∏ –ª–æ–≥–∏.
    private static let isLoggingEnable = Bundle.main.object(forInfoDictionaryKey: "isLoggingEnable") as? Bool
    private static let formatter = DateFormatter()
    
    // –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–µ–±—ã–≤–∞–ª–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    private static var lastState = State.notRunning
    
    // –¢–∞–∫ –∫–∞–∫ enum UIApplication.State —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ–≥–æ 3 –∑–Ω–∞—á–µ–Ω–∏—è (active, inactive –∏ background),
    // —è —Ä–µ—à–∏–ª–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ:
    public enum State: String {
        case notRunning
        case inactive
        case active
        case background
        case suspended // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –ü—Ä–æ–ø–∏—Å–∞–Ω–æ –¥–ª—è –ø–æ—Ä—è–¥–∫–∞.
    }
    
    public enum Time: String {
        case past = "moved"
        case future = "will move"
    }
    
    public static func log(newState: State? = nil, time: Time? = nil, methodName: String) {
        // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–ø–∞–¥–µ—Ç, –µ—Å–ª–∏ —É–¥–∞–ª–∏—Ç—å isLoggingEnable –∏–∑ Info.plist.
        guard isLoggingEnable ?? false else {
            return
        }
        printCurrentTime()
        printLoggedinfo(newState, time, methodName)
    }
    
    // –ü–æ–¥—É–º–∞–ª–∞, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–ª—é—Å :)
    private static func printCurrentTime() {
        let time = NSDate()
        formatter.dateFormat = "hh:mm:ss"
        print(formatter.string(from: time as Date), terminator: ": ")
    }
    
    private static func printLoggedinfo(_ newState: State?, _ time: Time?, _ methodName: String) {
        if (methodName.starts(with: "application")) {
            printApplicationStateInfo(newState, time, methodName)
        } else {
            printControllerStateInfo(methodName)
        }
    }
    
    private static func printApplicationStateInfo(_ newState: State?, _ time: Time?, _ methodName: String) {
        guard let newState = newState, let time = time else {
            return
        }
        if (lastState != newState) {
            print("üìï Application \(time.rawValue) from \(lastState) to \(newState): \(methodName).")
            lastState = newState
        } else {
            print("üìï Application didn't change state. State is still \(lastState): \(methodName).")
        }
    }
    
    private static func printControllerStateInfo(_ methodName: String) {
        print("üìò UIViewController lifecycle stage: \(methodName).")
    }
}
